import { serialize, parse, getYForX, curveLines } from "../Paths";
import { Vector } from "../Vectors";

import { d1, d2 } from "./paths";

test("parse()", () => {
  const path =
    "M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150 ";
  expect(serialize(parse(path))).toBe(path);
});

test("getYForX()", () => {
  const p1 = parse(
    "M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150"
  );
  expect(getYForX(p1, 200)).toBe(75);
  expect(getYForX(p1, 50)).toBe(151.160325);
  expect(() => getYForX(p1, 750)).toThrow();
});

test("getYForX2()", () => {
  const p1 = parse(d1);
  expect(getYForX(p1, 358.7)).toBeCloseTo(42.92573877023815, 4);
  expect(getYForX(p1, 358.8)).toBeCloseTo(42.90651208682783, 4);
  expect(getYForX(p1, 359)).toBeCloseTo(42.878457025833086, 4);
});

test("getYForX3()", () => {
  const p2 = parse(d2);
  expect(getYForX(p2, 414)).toBe(15.75);
});

test("curveLines()", () => {
  // Graph line with random points
  const vectors: Vector[] = [
    { x: 0, y: 192 },
    { x: 16.189944134078214, y: 192 },
    { x: 32.37988826815643, y: 192 },
    { x: 48.56983240223464, y: 192 },
    { x: 64.75977653631286, y: 192 },
    { x: 80.94972067039106, y: 192 },
    { x: 97.13966480446928, y: 192 },
    { x: 113.32960893854748, y: 192 },
    { x: 129.5195530726257, y: 192 },
    { x: 145.70949720670393, y: 192 },
    { x: 161.89944134078212, y: 192 },
    { x: 178.08938547486034, y: 192 },
    { x: 194.27932960893855, y: 192 },
    { x: 210.46927374301674, y: 192 },
    { x: 226.65921787709496, y: 192 },
    { x: 242.84916201117318, y: 192 },
    { x: 259.0391061452514, y: 192 },
    { x: 275.2290502793296, y: 192 },
    { x: 291.41899441340786, y: 192 },
    { x: 307.60893854748605, y: 192 },
    { x: 323.79888268156424, y: 192 },
    { x: 339.9888268156424, y: 192 },
    { x: 356.1787709497207, y: 192 },
    { x: 372.36871508379886, y: 192 },
    { x: 388.5586592178771, y: 192 },
    { x: 404.7486033519553, y: 192 },
    { x: 414, y: 192 },
  ];
  // Path generated by Rainbow react-native-animated-charts
  // using `svgBezierPath(points, 0.1, 'complex')`
  const referencePath =
    // eslint-disable-next-line max-len
    "M 0,192 C 1.6189944134078216,192 12.95195530726257,192 16.189944134078214,192 C 19.427932960893855,192 29.141899441340787,192 32.37988826815643,192 C 35.61787709497207,192 45.33184357541899,192 48.56983240223464,192 C 51.80782122905028,192 61.52178770949721,192 64.75977653631286,192 C 67.9977653631285,192 77.71173184357542,192 80.94972067039106,192 C 84.1877094972067,192 93.90167597765364,192 97.13966480446928,192 C 100.37765363128491,192 110.09162011173184,192 113.32960893854748,192 C 116.56759776536312,192 126.28156424581007,192 129.5195530726257,192 C 132.75754189944135,192 142.4715083798883,192 145.70949720670393,192 C 148.94748603351957,192 158.66145251396648,192 161.89944134078212,192 C 165.13743016759776,192 174.8513966480447,192 178.08938547486034,192 C 181.32737430167597,192 191.04134078212292,192 194.27932960893855,192 C 197.5173184357542,192 207.2312849162011,192 210.46927374301674,192 C 213.70726256983238,192 223.42122905027932,192 226.65921787709496,192 C 229.8972067039106,192 239.61117318435754,192 242.84916201117318,192 C 246.08715083798882,192 255.8011173184358,192 259.0391061452514,192 C 262.27709497206706,192 271.991061452514,192 275.2290502793296,192 C 278.46703910614525,192 288.1810055865922,192 291.41899441340786,192 C 294.6569832402235,192 304.3709497206704,192 307.60893854748605,192 C 310.8469273743017,192 320.5608938547486,192 323.79888268156424,192 C 327.0368715083799,192 336.7508379888268,192 339.9888268156424,192 C 343.22681564245806,192 352.94078212290503,192 356.1787709497207,192 C 359.4167597765363,192 369.1307262569832,192 372.36871508379886,192 C 375.6067039106145,192 385.32067039106147,192 388.5586592178771,192 C 391.79664804469274,192 402.20446927374303,192 404.7486033519553,192 C 407.29273743016756,192 413.0748603351955,192 414,192";
  expect(() => curveLines(vectors, 0.1, "complex")).not.toThrow();
  expect(curveLines(vectors, 0.1, "complex")).toEqual(parse(referencePath));
});
